# -*- coding: utf-8 -*-

"""
    pyevotune.param_decorators
    --------------------------

    This module defines decorators which are used to control parameter
    generation and consumption.
"""


"""

    Most general form:

        @pyevotune.param(
            name=<name>,
            checker_fn=<checker_fn>,
            checker_args=<checker arguments dict>
            generator_fn=<generator_fn>,
            generator_args=<generator arguments dict>)

    Range based forms:
        @pyevotune.int_param(name='int1', range=(0, 5))
        @pyevotune.float_param(name='float', range=(0, 5))

        # Valid for consumption when in the range (0, 5), generated by picking
        # from choices array
        @pyevotune.int_param(range=(0, 5), choices=[-2, 0, 7, 10])
        @pyevotune.float_param(range=(0, 5), choices=[-2, 0, 7, 10])
"""

from param import Param


class param(object):
    def __init__(
            self, name, checker_fn, checker_args, generator_fn, generator_args):
        self.name = name
        self.checker_fn = checker_fn
        self.checker_args = checker_args
        self.generator_fn = generator_fn
        self.generator_args = generator_args

    def __call__(self, cls):
        return add_param(cls, self)


def add_param(cls, param):
    if not hasattr(cls, '_pyevotune_params'):
        cls._pyevotune_params = []

    cls._pyevotune_params.append(param)

    return cls
